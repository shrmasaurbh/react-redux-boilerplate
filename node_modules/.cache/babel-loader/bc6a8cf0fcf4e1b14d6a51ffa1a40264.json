{"ast":null,"code":"import * as types from \"./types\";\nimport { get, post } from \"./fetchMethods\";\nexport const adminLogin = loginRequest => dispatch => {\n  const options = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(loginRequest)\n  };\n  post(`${process.env.REACT_APP_API_BASE_URL}/login`, options).then(response => {\n    dispatch({\n      type: types.LOGIN,\n      payload: response\n    });\n  }).catch(err => {\n    console.error(\"Request failed\", err);\n  });\n};\nexport const search = (searchRequestString, from = \"user\") => dispatch => {\n  if (searchRequestString === null) {\n    if (from === \"care_giver\") {\n      dispatch({\n        type: types.CAREGIVER_SEARCH_LIST,\n        payload: {}\n      });\n    } else if (from === \"care_manager\") {\n      dispatch({\n        type: types.CAREMANAGER_SEARCH_LIST,\n        payload: {}\n      });\n    } else if (from === \"guardian\") {\n      dispatch({\n        type: types.GAURDIAN_SEARCH_LIST,\n        payload: {}\n      });\n    } else if (from === \"physical_therapist\") {\n      dispatch({\n        type: types.PHYSICAL_THERAPIST_SEARCH_LIST,\n        payload: {}\n      });\n    } else if (from === \"nurse\") {\n      dispatch({\n        type: types.NURSE_SEARCH_LIST,\n        payload: {}\n      });\n    } else {\n      dispatch({\n        type: types.CLIENT_SEARCH_LIST,\n        payload: {}\n      });\n    }\n  } else {\n    let url = `${process.env.REACT_APP_API_BASE_URL}/user/search/list?type=${from}`;\n\n    if (searchRequestString && searchRequestString !== \"\") {\n      url += searchRequestString;\n    }\n\n    get(url).then(response => {\n      if (from === \"care_giver\") {\n        dispatch({\n          type: types.CAREGIVER_SEARCH_LIST,\n          payload: response\n        });\n      } else if (from === \"care_manager\") {\n        dispatch({\n          type: types.CAREMANAGER_SEARCH_LIST,\n          payload: response\n        });\n      } else if (from === \"guardian\") {\n        dispatch({\n          type: types.GAURDIAN_SEARCH_LIST,\n          payload: response\n        });\n      } else if (from === \"physical_therapist\") {\n        dispatch({\n          type: types.PHYSICAL_THERAPIST_SEARCH_LIST,\n          payload: response\n        });\n      } else if (from === \"nurse\") {\n        dispatch({\n          type: types.NURSE_SEARCH_LIST,\n          payload: response\n        });\n      } else {\n        dispatch({\n          type: types.CLIENT_SEARCH_LIST,\n          payload: response\n        });\n      }\n    }).catch(err => {\n      console.error(\"Request failed\", err);\n    });\n  }\n};\nexport const getCareGivers = () => dispatch => {\n  let url = `${process.env.REACT_APP_API_BASE_URL}/caregiver`;\n  get(url).then(response => dispatch({\n    type: types.CARE_GIVER_LIST,\n    payload: response\n  })).catch(err => {\n    console.error(\"Request failed\", err);\n  });\n};","map":{"version":3,"sources":["/home/dell/frontends/magnet_frontend_old/src/actions/commonActions.js"],"names":["types","get","post","adminLogin","loginRequest","dispatch","options","method","headers","body","JSON","stringify","process","env","REACT_APP_API_BASE_URL","then","response","type","LOGIN","payload","catch","err","console","error","search","searchRequestString","from","CAREGIVER_SEARCH_LIST","CAREMANAGER_SEARCH_LIST","GAURDIAN_SEARCH_LIST","PHYSICAL_THERAPIST_SEARCH_LIST","NURSE_SEARCH_LIST","CLIENT_SEARCH_LIST","url","getCareGivers","CARE_GIVER_LIST"],"mappings":"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","sourcesContent":["import * as types from \"./types\";\nimport { get, post } from \"./fetchMethods\";\n\nexport const adminLogin = loginRequest => dispatch => {\n  const options = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(loginRequest)\n  };\n\n  post(`${process.env.REACT_APP_API_BASE_URL}/login`, options)\n    .then(response => {\n      dispatch({\n        type: types.LOGIN,\n        payload: response\n      });\n    })\n    .catch(err => {\n      console.error(\"Request failed\", err);\n    });\n};\n\nexport const search = (searchRequestString, from = \"user\") => dispatch => {\n  if (searchRequestString === null) {\n    if (from === \"care_giver\") {\n      dispatch({\n        type: types.CAREGIVER_SEARCH_LIST,\n        payload: {}\n      });\n    } else if (from === \"care_manager\") {\n      dispatch({\n        type: types.CAREMANAGER_SEARCH_LIST,\n        payload: {}\n      });\n    } else if (from === \"guardian\") {\n      dispatch({\n        type: types.GAURDIAN_SEARCH_LIST,\n        payload: {}\n      });\n    } else if (from === \"physical_therapist\") {\n      dispatch({\n        type: types.PHYSICAL_THERAPIST_SEARCH_LIST,\n        payload: {}\n      });\n    } else if (from === \"nurse\") {\n      dispatch({\n        type: types.NURSE_SEARCH_LIST,\n        payload: {}\n      });\n    } else {\n      dispatch({\n        type: types.CLIENT_SEARCH_LIST,\n        payload: {}\n      });\n    }\n  } else {\n    let url = `${process.env.REACT_APP_API_BASE_URL}/user/search/list?type=${from}`;\n\n    if (searchRequestString && searchRequestString !== \"\") {\n      url += searchRequestString;\n    }\n\n    get(url)\n      .then(response => {\n        if (from === \"care_giver\") {\n          dispatch({\n            type: types.CAREGIVER_SEARCH_LIST,\n            payload: response\n          });\n        } else if (from === \"care_manager\") {\n          dispatch({\n            type: types.CAREMANAGER_SEARCH_LIST,\n            payload: response\n          });\n        } else if (from === \"guardian\") {\n          dispatch({\n            type: types.GAURDIAN_SEARCH_LIST,\n            payload: response\n          });\n        } else if (from === \"physical_therapist\") {\n          dispatch({\n            type: types.PHYSICAL_THERAPIST_SEARCH_LIST,\n            payload: response\n          });\n        } else if (from === \"nurse\") {\n          dispatch({\n            type: types.NURSE_SEARCH_LIST,\n            payload: response\n          });\n        } else {\n          dispatch({\n            type: types.CLIENT_SEARCH_LIST,\n            payload: response\n          });\n        }\n      })\n      .catch(err => {\n        console.error(\"Request failed\", err);\n      });\n  }\n};\n\nexport const getCareGivers = () => dispatch => {\n  let url = `${process.env.REACT_APP_API_BASE_URL}/caregiver`;\n\n  get(url)\n    .then(response =>\n      dispatch({\n        type: types.CARE_GIVER_LIST,\n        payload: response\n      })\n    )\n    .catch(err => {\n      console.error(\"Request failed\", err);\n    });\n};\n"]},"metadata":{},"sourceType":"module"}